@page "/edit-flight/{id:int?}"
@attribute [Authorize]
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JsRuntime

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>
@if (Id != null)
{
    <h2>Edit Flight</h2>
}
else
{
    <h2>Add Flight</h2>
}

@if (loading)
{
    @*<p>Loading...</p>*@
    <div class="spinner"></div>
}
else
{
    <RadzenTemplateForm Data="@flight" TItem="FlightDto" Submit="@Submit" InvalidSubmit="@OnInvalidSubmit">
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="Date" @bind-Value="@flight.Date" DateFormat="d-MMM-yyyy" Change="@(args => OnDateChanged(args))"></RadzenDatePicker>
                <RadzenRequiredValidator Component="Date" Text="Date is required" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Model" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown Name="Model" @bind-Value="@flight.Model.Id" AllowClear="false" Data="@models" TextProperty="Name" ValueProperty="Id"></RadzenDropDown>
                <RadzenRequiredValidator Component="Model" Text="Model is required" DefaultValue="0" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Field" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown Name="Field" @bind-Value="@flight.Field.Id" AllowClear="false" Data="@locations" TextProperty="Name" ValueProperty="Id"></RadzenDropDown>
                <RadzenRequiredValidator Component="Field" Text="Field is required" DefaultValue="0" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Pilot" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown Name="Pilot" @bind-Value="@flight.Pilot.Id" AllowClear="false" Data="@pilots" TextProperty="Name" ValueProperty="Id"></RadzenDropDown>
                <RadzenRequiredValidator Component="Pilot" Text="Pilot is required" DefaultValue="0" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Flight Minutes" />
            </div>
            <div class="col-md-8">
                <RadzenNumeric Name="FlightMinutes" TValue="float" @bind-Value="@flight.FlightMinutes"></RadzenNumeric>
                <RadzenCompareValidator Component="FlightMinutes" Text="Flight minutes must be greater than 0" Value="0.0f" Operator="@CompareOperator.GreaterThan" Popup="false" Style="display: block"></RadzenCompareValidator>
      </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-top d-flex">
                <RadzenLabel Text="Tags" />
            </div>
            <div class="col-md-8">
                <RadzenCheckBoxList @bind-Value=@selectedTags TValue="int" Orientation="Orientation.Vertical" Data="@tagsMaster" TextProperty="Name" ValueProperty="Id"></RadzenCheckBoxList>  
            </div>
        </div>

      

        <div class="row">
            <div class="col-md-2 align-items-top d-flex">
                <RadzenLabel Text="Details" />
            </div>
            <div class="col-md-8">
                <RadzenTextArea @bind-Value="@flight.Details" Rows=5 style="width: 100%"></RadzenTextArea>
            </div>
        </div>

        <div class="row justify-content-start">
            <div class="col-md-2 align-items-top d-flex" />
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-top d-flex" />
            <div class="col-md-8">
                <RadzenLabel Text="@message"></RadzenLabel>
            </div>
        </div>
    </RadzenTemplateForm>
}


@code {
    private FlightDto flight = new FlightDto();
    private ModelDto[] models;
    private LocationDto[] locations;
    private PilotDto[] pilots;
    private String accountId = "0";
    private string message = "";
    private FlightTagDto[] tagsMaster;
    private IEnumerable<int> selectedTags;

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    public bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;

            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;

            flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
            Console.WriteLine($"OnInitializedAsync(): flight.Date == {flight.Date}");

            flight.AccountId = Int32.Parse(accountId);

            var client = ClientFactory.CreateClient("FlightLogAPI");
            models = await client.GetFromJsonAsync<ModelDto[]>($"/api/{accountId}/models/active");
            locations = await client.GetFromJsonAsync<LocationDto[]>($"/api/{accountId}/locations");
            pilots = await client.GetFromJsonAsync<PilotDto[]>($"/api/{accountId}/pilots");
            tagsMaster = await client.GetFromJsonAsync<FlightTagDto[]>("/api/flighttags");
            selectedTags = new int[0];

            if (Id.HasValue)
            {
                flight = await client.GetFromJsonAsync<FlightDto>($"/api/{accountId}/flights/{Id.Value}");
                // Also populate the selected tags
                foreach(var tag in flight.Tags)
                {
                    selectedTags = selectedTags.Concat(new int[] { tag.Id });
                }

            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task Submit()
    {
        message = "Saving...";
        HttpResponseMessage response;

        Console.WriteLine($"Submit(): flight.Date == {flight.Date}");

        // Add tags to Flight
        foreach (int tagId in selectedTags)
        {
            if (tagId > 0)
            {
                flight.Tags.Add(tagsMaster.Where(x => x.Id == tagId).Single());
            }
        }

        // todo Wrap in a try/catch
        var client = ClientFactory.CreateClient("FlightLogAPI");
        if (Id.HasValue)
        {
            response = await client.PutAsJsonAsync($"/api/{accountId}/flights", flight);
        }
        else
        {
            response = await client.PostAsJsonAsync($"/api/{accountId}/flights", flight);
        }

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var savedFlight = await response.Content.ReadFromJsonAsync<FlightDto>();
            clearFormData();
            message = $"Saved flight with Id {savedFlight.Id}";
        }
        else
        {
            message = $"Failed to save ({response.StatusCode.ToString()})";
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        message = "Invalid entry";

    }

    void OnDateChanged(DateTime? value)
    {
        //if (value.HasValue)
        //{
        //    flight.Date = value.Value.Date;
        //    Console.WriteLine($"OnDateChanged(): flight.Date == {flight.Date}");

        //}
    }

    void Cancel()
    {
        //clearFormData();
        // JSRuntime.InvokeAsync. window.back();
        JsRuntime.InvokeVoidAsync("history.go", -1);
    }

    void clearFormData()
    {
        flight = new FlightDto();
        flight.AccountId = Int32.Parse(accountId);
        flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
        message = "Form cleared";
        selectedTags = new int[0];
        Console.WriteLine($"clearFormData(): flight.Date == {flight.Date}");
    }
}
