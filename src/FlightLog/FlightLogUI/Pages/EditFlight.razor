@page "/edit-flight/{id:int?}"
@using System.Globalization

@attribute [Authorize]
@inject IHttpClientFactory ClientFactory

@if (Id != null)
{
    <h3>Edit Flight</h3>
}
else
{
    <h3>Add Flight</h3>
}

@if (loading)
{
    @*<p>Loading...</p>*@
    @* <div class="spinner"></div> *@
    <p>Loading...</p>

}
else
{
    <EditForm Model="@flight" OnValidSubmit="@HandleSubmit" FormName="flight_entry" novalidate>
        <DataAnnotationsValidator />
    @*     <FluentValidationSummary /> *@
        <FluentStack Orientation="Orientation.Vertical">
            <div>
                <FluentDatePicker @bind-Value="@flight.Date" @bind-Value:format="yyyy/MM/dd" Culture="@(new CultureInfo("en-NZ"))" Label="Date" Required /> @* Culture="@(new CultureInfo("en-NZ"))" *@ @* @bind:Format="d-MMM-yyyy" *@
                <FluentValidationMessage For="@(() => flight.Date)" />
            </div>
            @* <div>
                <FluentCombobox Items=@models Placeholder="Choose Model..." Label="Model" TOption="FlightModelDto" OptionText="@(i => i.Name)" OptionValue="@(i => i.Id.ToString())" OptionSelected="@(i => i.Id == flight.Model.Id)" @bind-SelectedOption="@flight.Model" Required />
                <FluentValidationMessage For="@(() => flight.Model)" />
            </div> *@
            <div>
                <FluentSelect Items=@models Placeholder="Choose Model..." Label="Model" TOption="FlightModelDto" OptionText="@(i => i.Name)" OptionValue="@(i => i.Id.ToString())" @bind-SelectedOption="@flight.Model" @bind-Value="@selectedModelId" Required />
                <FluentValidationMessage For="@(() => flight.Model)" />
            </div>
            <div>
                <FluentSelect Items=@pilots Placeholder="Choose Pilot..." Label="Pilot" TOption="FlightPilotDto" OptionText="@(i => i.Name)" OptionValue="@(i => i.Id.ToString())" @bind-SelectedOption="@flight.Pilot" @bind-value="@selectedPilotId" Required /> @* @flight.Pilot.Id    @bind-value:event="oninput" *@
                <FluentValidationMessage For="@(() => flight.Pilot)" />
            </div>
            <div>
                <FluentSelect Items=@locations Placeholder="Choose Field..." Label="Field" TOption="FlightLocationDto" OptionText="@(i => i.Name)" OptionValue="@(i => i.Id.ToString())" @bind-SelectedOption="@flight.Field" @bind-Value="@selectedLocationId" Required />
                <FluentValidationMessage For="@(() => flight.Field)" />
            </div>
            <div>
                <FluentNumberField Name="minutes" @bind-Value="flight.FlightMinutes" Label="Flight time" Required Size="3" />
                <FluentValidationMessage For="@(() => flight.FlightMinutes)" />
            </div>
            <div>
                <FluentTextArea Name="description" @bind-Value="flight.Details" Label="Description" Resize=TextAreaResize.Both Cols=80 Spellcheck="true" />
            </div>
    @*         <div>
                @foreach (var tag in tagsMaster)
                {
                    <FluentCheckbox Label="@tag.Name" />
                }
            </div> *@
            <div>
                <FluentSelect Label="Tags" Items=@tagsMaster TOption="FlightTagDto" Multiple=true OptionText="@(i => i.Name)" OptionValue="@(i => i.Id.ToString())" @bind-SelectedOptions="@selectedTags" />
            </div>
            <div>
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
                <FluentButton Type="ButtonType.Reset" Appearance="Appearance.Neutral" OnClick="@HandleCancel">Cancel</FluentButton>

            </div>
        </FluentStack>
    </EditForm>

}

@code {
        [SupplyParameterFromForm]
        private FlightDto flight { get; set; } = new();

    private List<FlightModelDto> models = new List<FlightModelDto>();
    private List<FlightLocationDto> locations = new List<FlightLocationDto>();
    private List<FlightPilotDto> pilots = new List<FlightPilotDto>();
    private String accountId = "0";
    private string message = "";
    private IEnumerable<FlightTagDto> tagsMaster;
    private IEnumerable<FlightTagDto> selectedTags;
    private string selectedModelId = string.Empty;
    private string selectedPilotId = string.Empty;
    private string selectedLocationId = string.Empty;
    // private DateTime? selectedDate = null;

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            flight ??= new FlightDto();
            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;

            flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
            Console.WriteLine($"OnInitializedAsync(): flight.Date == {flight.Date}");

            flight.AccountId = Int32.Parse(accountId);

            var client = ClientFactory.CreateClient("FlightLogAPI");
            models = await client.GetFromJsonAsync<List<FlightModelDto>>($"/api/{accountId}/models/active");
            //models.Add(new FlightModelDto { Id = 1, Name = "Test model" });
            //models.Add(new FlightModelDto { Id = 2, Name = "TopFlite P47 Razorback" });

            locations = await client.GetFromJsonAsync<List<FlightLocationDto>>($"/api/{accountId}/locations");
            pilots = await client.GetFromJsonAsync<List<FlightPilotDto>>($"/api/{accountId}/pilots");
            tagsMaster = await client.GetFromJsonAsync<FlightTagDto[]>("/api/flighttags");
            selectedTags = new List<FlightTagDto>();

            if (Id.HasValue)
            {
                flight = await client.GetFromJsonAsync<FlightDto>($"/api/{accountId}/flights/{Id.Value}");
                if (flight != null)
                {
                    selectedModelId = flight.Model.Id.ToString();
                    selectedPilotId = flight.Pilot.Id.ToString();
                    selectedLocationId = flight.Field.Id.ToString();
                    // Also populate the selected tags
                    foreach (var tag in flight.Tags)
                    {
                        selectedTags = selectedTags.Append(tag);
                    }
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task HandleSubmit()
    {
        message = "Saving...";
        HttpResponseMessage response;

        Console.WriteLine($"Submit(): flight.Date == {flight.Date}");
        //TODO // Add selected elements
        //flight.Model = selectedModel;

        // Add tags to Flight
        foreach (FlightTagDto tag in selectedTags)
        {
            //if (tagId > 0)
            //{
            flight.Tags.Add(tag);
            //}
        }

        // todo Wrap in a try/catch
        var client = ClientFactory.CreateClient("FlightLogAPI");
        if (Id.HasValue)
        {
            response = await client.PutAsJsonAsync($"/api/{accountId}/flights", flight);
        }
        else
        {
            response = await client.PostAsJsonAsync($"/api/{accountId}/flights", flight);
        }

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var savedFlight = await response.Content.ReadFromJsonAsync<FlightDto>();
            clearFormData();
            message = $"Saved flight with Id {savedFlight.Id}";
        }
        else
        {
            message = $"Failed to save ({response.StatusCode.ToString()})";
        }
    }

    protected async Task HandleCancel()
    {
        clearFormData();
        // redirect back???
    }

    void clearFormData()
    {
        flight = new FlightDto();
        flight.AccountId = Int32.Parse(accountId);
        flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
        message = "Form cleared";
        selectedTags = new List<FlightTagDto>();
        selectedModelId = string.Empty;
        selectedPilotId = string.Empty;
        selectedLocationId = string.Empty;

        Console.WriteLine($"clearFormData(): flight.Date == {flight.Date}");
    }
}