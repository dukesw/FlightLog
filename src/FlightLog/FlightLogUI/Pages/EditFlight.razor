@page "/edit-flight/{id:int?}"

@attribute [Authorize]
@inject IHttpClientFactory ClientFactory
@inject ISnackbar SnackbarService

@if (Id == null)
{
    <h3>Add Flight</h3>
}
else
{
    <h3>Edit Flight</h3>
}

@if (loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid Spacing="6" Class="pt-8">
        <MudForm @ref="form" @bind-IsValid="@isValid" Class="mud-width-full px-4">
            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="flight.Date" Label="Date" Variant="Variant.Outlined" Required="true" RequiredError="Date is required" ShowToolbar=false OpenTo="OpenTo.Date" DateFormat="d-MMM-yyyy" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="flight.Model" Label="Model" Variant="Variant.Outlined" Clearable=true Required="true" OnlyValidateIfDirty="true" RequiredError="Model is required">
                    @foreach (var model in models)
                    {
                        <MudSelectItem Value="model">@model.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="flight.Pilot" Label="Pilot" Variant="Variant.Outlined" Clearable=true Required="true" OnlyValidateIfDirty="true" RequiredError="Pilot is required">
                    @foreach (var pilot in pilots)
                    {
                        <MudSelectItem Value="pilot">@pilot.Name</MudSelectItem>

                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="flight.Field" Label="Field" Variant="Variant.Outlined" Clearable=true Required="true" OnlyValidateIfDirty="true" RequiredError="Field is required">
                    @foreach (var location in locations)
                    {
                        <MudSelectItem Value="location">@location.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudNumericField @bind-Value="flight.FlightMinutes" Label="Flight Minutes" Variant="Variant.Outlined" Required="true" RequiredError="Flight time is required" Validation="@(new Func<float?, string>(FlightMinutesValid))" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="flight.Details" Label="Notes" Variant="Variant.Outlined" AutoGrow Lines="3" Clearable=true />
            </MudItem>
            <MudItem xs="12">
                <MudToggleGroup T="int" @bind-Values="flight.TagIds" SelectionMode="SelectionMode.MultiSelection" Label="Tags" CheckMark>
                    @foreach (var tag in tagsMaster)
                    {
                        <MudToggleItem Value="@(tag.Id)" Text="@tag.Name" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                    }
                </MudToggleGroup>
            </MudItem>
        </MudForm>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" OnClick="@HandleClear">Clear</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleSubmit" Disabled="@(!isValid)">Save</MudButton>
        </MudItem>
    </MudGrid>

    <div class="d-flex mud-width-full align-center mt-8">
        <MudText Typo="Typo.subtitle1" Class="mr-2">Selected model: </MudText>
        <MudChip T="string">@(flight.Model != null ? flight.Model.Name : "Select model")</MudChip>
        <MudChip T="string">@(flight.Pilot != null ? flight.Pilot.Name : "Select pilot")</MudChip>
        <MudChip T="string">@(flight.Field != null ? flight.Field.Name : "Select field")</MudChip>

    </div>
    
}
@code {
    public bool loading = false;

    [SupplyParameterFromForm]
    private FlightDto flight { get; set; } = new();

    private MudForm form;
    private bool isValid = false;

    private IList<FlightModelDto> models = new List<FlightModelDto>();
    private IList<FlightLocationDto> locations = new List<FlightLocationDto>();
    private IList<FlightPilotDto> pilots = new List<FlightPilotDto>();
    private String accountId = "0";
    private string message = "";
    private IList<FlightTagDto> tagsMaster;

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            flight ??= new FlightDto();
            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;

            flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
            Console.WriteLine($"OnInitializedAsync(): flight.Date == {flight.Date}");

            flight.AccountId = Int32.Parse(accountId);

            var client = ClientFactory.CreateClient("FlightLogAPI");
            models = await client.GetFromJsonAsync<List<FlightModelDto>>($"/api/{accountId}/models/active");
            locations = await client.GetFromJsonAsync<List<FlightLocationDto>>($"/api/{accountId}/locations");
            pilots = await client.GetFromJsonAsync<List<FlightPilotDto>>($"/api/{accountId}/pilots");
            tagsMaster = await client.GetFromJsonAsync<FlightTagDto[]>("/api/flighttags");

            if (Id.HasValue)
            {
                flight = await client.GetFromJsonAsync<FlightDto>($"/api/{accountId}/flights/{Id.Value}");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }

    }

    protected async Task HandleSubmit()
    {
        message = "Saving...";

        form.Validate();
        if (form.IsValid)
        {
            HttpResponseMessage response;

            var client = ClientFactory.CreateClient("FlightLogAPI");
            if (Id.HasValue)
            {
                response = await client.PutAsJsonAsync($"/api/{accountId}/flights", flight);
            }
            else
            {
                response = await client.PostAsJsonAsync($"/api/{accountId}/flights", flight);
            }

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var savedFlight = await response.Content.ReadFromJsonAsync<FlightDto>();
                clearFormData();
                message = $"Saved flight with Id {savedFlight.Id}";
                SnackbarService.Add($"Flight saved with Id {savedFlight.Id}", Severity.Info);
            }
            else
            {
                message = $"Failed to save ({response.StatusCode.ToString()})";
                SnackbarService.Add($"Failed to save ({response.StatusCode.ToString()})", Severity.Error);
            }
        }
    }

    protected void HandleClear()
    {
        clearFormData();
        isValid = false;
        form.ResetValidation();
       
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // if (firstRender == true)
        // {
        //     if (Id.HasValue)
        //     {
        //         if (flight != null)
        //         {
        //             selectedModel = flight.Model;
        //             selectedPilot = flight.Pilot;
        //             selectedField = flight.Field;
        //             // Also populate the selected tags
        //             foreach (var tag in flight.Tags)
        //             {
        //                 selectedTags = selectedTags.Append(tag);
        //             }
        //         }
        //     }
        // }
    }

    private string FlightMinutesValid(float? arg)
    {
        if (arg == null)
        {
            return "Flight time is required";
        }

        if (arg <= 0)
        {
            isValid = false;
            return "Flight time must be greater than 0";
        }
        return null;
    }

    private void clearFormData()
    {
        flight = new FlightDto();
        flight.Date = new DateTimeOffset(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0, new TimeSpan(0, 0, 0)).Date;
        //selectedTags = new List<FlightTagDto>();
    }

}