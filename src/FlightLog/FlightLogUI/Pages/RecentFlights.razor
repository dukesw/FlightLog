@page "/recent-flights"
@attribute [Authorize]

@inject IHttpClientFactory ClientFactory

<h3>RecentFlights</h3>
<p>These are flights from the last month.</p>

<FluentDataGrid Items="@recentFlights" AutoFit="true" Style="width: 100%;" ShowHover="true">
    @* Pagination="@pagination"> *@
    <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Date)" Format="d/M/yyyy" Sortable="true" />
    <PropertyColumn Property="@(p => p.Model.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Pilot.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Field.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.FlightMinutes)" Sortable="true" />
    <TemplateColumn Title="Edit">
        <a href="/edit-flight/@context.Id">Edit</a>
    </TemplateColumn>
</FluentDataGrid>

@code {
    private IQueryable<FlightDto> recentFlights;
    private FlightDto[] recentFlightsResult;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var user = (await authenticationState).User;
            var accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");
            recentFlightsResult = await client.GetFromJsonAsync<FlightDto[]>($"/api/{accountId}/flights/recent");
            recentFlights = recentFlightsResult.AsQueryable();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }
}
