@page "/recent-flights"

@attribute [Authorize]
@inject IHttpClientFactory ClientFactory


<h3>Recent Flights</h3>

@if (loading)
{
    @*<p>Loading...</p>*@
    @* <div class="spinner"></div> *@
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />

}
else
{
    <MudDataGrid T="FlightDto" ServerData="ServerReload" ColumnResizeMode="ResizeMode.Column" Filterable=false LoadingProgressColor="Color.Primary">
        <Columns>
            <PropertyColumn Property="x => x.Date" Format="d-MMM-yyyy"/>
            <PropertyColumn Property="x => x.Model.Name" Title="Model" />
            <PropertyColumn Property="x => x.FlightMinutes" Title="Minutes" />
            <PropertyColumn Property="x => x.Field.Name" Title="Field" />
            <MudBlazor.TemplateColumn Context="flight">
                <CellTemplate>
                    <MudLink Href="@($"/edit-flight/{flight.Item.Id}")">Edit</MudLink>
                </CellTemplate>
            </MudBlazor.TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="FlightDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private IList<FlightDto> recentFlights = new List<FlightDto>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private int recentFlightCount = 0;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var user = (await authenticationState).User;
            var accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");
            recentFlightCount = await client.GetFromJsonAsync<int>($"/api/{accountId}/flights/recent/count");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task<GridData<FlightDto>> ServerReload(GridState<FlightDto> state)
    {
        try
        {
            loading = true;
            var user = (await authenticationState).User;
            var accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");
            recentFlights = await client.GetFromJsonAsync<FlightDto[]>($"/api/{accountId}/flights/recent/skip/{state.Page * state.PageSize}/take/{state.PageSize}");

            return new GridData<FlightDto>() { Items = recentFlights, TotalItems = recentFlightCount };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        return new GridData<FlightDto>();    // Just ensursing all paths return a value
    }
}