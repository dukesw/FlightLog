@page "/model-history/{modelid:int}"
@attribute [Authorize]
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JsRuntime
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<style>
    form .row {
        margin-bottom: 16px;
    }

    form .shortrow {
        margin-bottom: 0px;
    }
</style>
<h2>Model History</h2>
@if (loading)
{
    @*<p>Loading...</p>*@
    <div class="spinner"></div>
}
else
{
    @* <RadzenTemplateForm Data="@model" TItem="ModelDto" Submit="@Submit" InvalidSubmit="@OnInvalidSubmit">

        <div class="row shortrow">
            <div class="col-md-12 align-items-center">
                <table>
                    <tr>
                        <td>Name</td>
                        <td>@model.Name (@model.Manufacturer)</td>
                    </tr>
                    <tr>
                        <td>Status</td>
                        <td>@model.Status.Name</td>
                    </tr>
                    <tr>
                        <td>Total Flights</td>
                        <td>@model.TotalFlights</td>
                    </tr>
                    <tr>
                        <td>Purchased On</td>
                        <td>
                            @if (model.PurchasedOn.HasValue)
                            {
                                @model.PurchasedOn.Value.ToString("d-MMM-yyyy")
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Maidened On</td>
                        <td>
                            @if (model.MaidenedOn.HasValue)
                            {
                                @model.MaidenedOn.Value.ToString("d-MMM-yyyy")
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Notes</td>
                        
                    </tr>
                    <tr>
                        <td colspan="2">@model.Notes</td>
                    </tr>
                </table>

            </div>
        </div>

        <div class="row justify-content-start">
            @*<div class="col-md-2 align-items-top d-flex" />*@ @*
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton Icon="edit" Text="Edit Model" Click=@(args => OpenModelEditScreen(model.Id)) />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 align-items-center d-flex">
                <RadzenDataGrid Data="@maintenanceLogs" TItem="MaintenanceLogDto" AllowSorting="true" EmptyText="No history entries for this model">
                    <Columns>
                        <RadzenDataGridColumn TItem="MaintenanceLogDto" Property="Date" Filterable="false" Title="Date" FormatString="{0:dd-MMM-yyyy}" Width="100px" />
                        <RadzenDataGridColumn TItem="MaintenanceLogDto" Property="Type.Name" Filterable="false" Title="Type" Width="100px"/>
                        <RadzenDataGridColumn TItem="MaintenanceLogDto" Property="Details" Filterable="false" Title="Details" />
                        <RadzenDataGridColumn TItem="MaintenanceLogDto" Property="Id" Filterable="false" Title="" Sortable="false" Width="100px">
                            <Template Context="maintenanceLog">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Click=@(args => OpenEditScreenToEditEntryAsDialog(maintenanceLog.Id)) @onclick:stopPropagation="true"/>
                                
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click=@(args => ConfirmDeleteDialog(maintenanceLog.Id)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                        
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>

        <div class="row justify-content-start">
            @*<div class="col-md-2 align-items-top d-flex" />*@ @*
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="add" Text="Add History" Click=@OpenEditScreenToAddNewEntryAsDialog />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm> *@
}


@code {

    private String accountId = "0";
    private ModelDto model = new ModelDto();
    //private List<ModelStatusDto> modelStatuses = new List<ModelStatusDto>();
    private IList<MaintenanceLogDto> maintenanceLogs = new List<MaintenanceLogDto>();

    [Parameter]
    public int ModelId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    public bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;

            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;

            //model.AccountId = Int32.Parse(accountId);

            var client = ClientFactory.CreateClient("FlightLogAPI");

            //modelStatuses = await client.GetFromJsonAsync<List<ModelStatusDto>>($"/api/modelstatuses");
            model = await client.GetFromJsonAsync<ModelDto>($"/api/{accountId}/models/{ModelId}");
            maintenanceLogs = await client.GetFromJsonAsync<List<MaintenanceLogDto>>($"/api/{accountId}/maintenanceLogs/model/{ModelId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    public async Task OpenEditScreenToAddNewEntryAsDialog()
    {
        await OpenEditScreenAsDialog("Add Model History", ModelId, null);
    }

    public async Task OpenEditScreenToEditEntryAsDialog(int id)
    {
        await OpenEditScreenAsDialog("Add Model History", ModelId, id);
    }

    private async Task OpenEditScreenAsDialog(string dialogTitle, int modelId, int? id) 
    {
        // await DialogService.OpenAsync<EditModelHistory>(dialogTitle,
        //       new Dictionary<string, object>() { { "ModelId", modelId } , { "Id", id } },
        //       new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

        // var client = ClientFactory.CreateClient("FlightLogAPI");
        // maintenanceLogs = await client.GetFromJsonAsync<List<MaintenanceLogDto>>($"/api/{accountId}/maintenanceLogs/model/{ModelId}");
    }

    private async Task ConfirmDeleteDialog(int maintenanceLogId) 
    {
        // var result = await DialogService.Confirm("Are you sure you want to delete this entry?", "Delete History", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        // if (result == true) 
        // {
        //     // Delete and update. 
        //     var client = ClientFactory.CreateClient("FlightLogAPI");
        //     await client.DeleteAsync($"/api/{accountId}/maintenanceLogs/{maintenanceLogId}");
        //     maintenanceLogs = await client.GetFromJsonAsync<List<MaintenanceLogDto>>($"/api/{accountId}/maintenanceLogs/model/{ModelId}");
        // }
    }

    public void OpenModelEditScreen(int modelId) 
    {
        NavigationManager.NavigateTo($"/edit-model/{modelId}");
    }

    protected async Task Submit()
    {
        HttpResponseMessage response;

        // todo Wrap in a try/catch
        //var client = ClientFactory.CreateClient("FlightLogAPI");
        //if (Id.HasValue)
        //{
        //    response = await client.PutAsJsonAsync($"/api/{accountId}/models", model);
        //}
        //else
        //{
        //    response = await client.PostAsJsonAsync($"/api/{accountId}/models", model);
        //}

        //if (response.StatusCode == System.Net.HttpStatusCode.OK)
        //{
        //    var savedModel = await response.Content.ReadFromJsonAsync<ModelDto>();
        //    clearFormData();
        //}
        //else
        //{
        //    // TODO Put a notification up
        //}
    }

    // void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    // {


    // }

    void Cancel()
    {
        //clearFormData();
        // JSRuntime.InvokeAsync. window.back();
        JsRuntime.InvokeVoidAsync("history.go", -1);
    }

    void clearFormData()
    {
        model = new ModelDto();
        model.AccountId = Int32.Parse(accountId);


    }
}
