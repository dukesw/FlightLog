@page "/"

@attribute [Authorize]
@inject IHttpClientFactory ClientFactory
@inject IAccessTokenProvider AccessTokenProvider
@inject AuthenticationStateProvider AuthStateProvider

<h2>Flights</h2>
<p>Welcome to Flight Log - the app to enter and manage your RC flights. </p>
@if (loading)
{
    @*<p>Loading...</p>*@
    <div class="spinner"></div>
}
else
{
    
@*    @if (recentFlightGroups == null)
    {
        <p>No flights recently.</p>
    }
    else
    {
        <ul>
            @foreach (var flight in recentFlightGroups)
            {
                <li>Period: @flight.PeriodName, Model: @flight.Model.Name, Flights: @flight.FlightCount</li>
            }
        </ul>
    }*@
@*    <RadzenChart>
        @foreach(List<FlightsGroupedByModelAndTimeDto> flightGroupSeries in flightGroupSerieses)
        {
            <RadzenColumnSeries Data="@flightGroupSeries" CategoryProperty="PeriodName" Title="@flightGroupSeries[0].Model.Name" LineType="LineType.Dashed" ValueProperty="FlightCount" />
        }
        

         <RadzenColumnOptions Radius="2" Margin="2" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Flights" />
        </RadzenValueAxis>
        <RadzenLegend Position=LegendPosition.Bottom />
    </RadzenChart>*@

    <RadzenChart>
       
            <RadzenColumnSeries Title="Week Starting" Data="@recentFlightsGroupedByWeek" CategoryProperty="PeriodName" LineType="LineType.Dashed" ValueProperty="FlightCount" />
        

         <RadzenColumnOptions Radius="2" Margin="2" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Flights" />
        </RadzenValueAxis>
        <RadzenLegend Position=LegendPosition.Bottom />
    </RadzenChart>



}

@code {
    private List<FlightsGroupedByModelAndTimeDto> recentFlightsGroupedByModel;
    private List<FlightsGroupedByTimeDto> recentFlightsGroupedByWeek;

    private List<string> modelSeries;

    private List<List<FlightsGroupedByModelAndTimeDto>> flightGroupSerieses = new List<List<FlightsGroupedByModelAndTimeDto>>();
    private List<List<FlightsGroupedByTimeDto>> flightsGroupedByWeekSeries = new List<List<FlightsGroupedByTimeDto>>();

    //[CascadingParameter]
    //private Task<AuthenticationState> authenticationState { get; set; }
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            //var tokenResult = await AccessTokenProvider.RequestAccessToken();
            //if (tokenResult.TryGetToken(out var token))
            //{
            //    token.ToString();
            //}


            // New try
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            var accountId = user.Claims
                .Where(c => c.Type.Equals("https://flightlog.co.nz/claims/account_id"))
                .Select(c => c.Value)
                .FirstOrDefault() ?? string.Empty;           

            //var user = (await authenticationState).User;
            //var accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");
            var startDate = DateTime.Now.AddDays(-70); // 10 weeks
            var endDate = DateTime.Now; //.AddDays(-DateTime.Now.Day).AddMonths(1).AddSeconds(-1);

            //recentFlightsGroupedByModel = await client.GetFromJsonAsync<List<FlightsGroupedByModelAndTimeDto>>($"/api/{accountId}/flights/group/monthandmodel/from/{startDate.ToString("yyyy-MM-dd")}/to/{endDate.ToString("yyyy-MM-dd")}");

            //var modelSeries = recentFlightsGroupedByModel.Select(x => x.Model.Name).Distinct().ToList();
            //// Now split into separate serieses based on model
            //foreach (string modelName in modelSeries)
            //{
            //    var series = recentFlightsGroupedByModel.Where(x => x.Model.Name == modelName);
            //    flightGroupSerieses.Add(series.ToList());
            //}

            // Second graph :)
            recentFlightsGroupedByWeek = await client.GetFromJsonAsync<List<FlightsGroupedByTimeDto>>($"/api/{accountId}/flights/group/week/from/{startDate.ToString("yyyy-MM-dd")}/to/{endDate.ToString("yyyy-MM-dd")}");


        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }
}