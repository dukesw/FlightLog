@page "/edit-model/{id:int?}"
@attribute [Authorize]
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JsRuntime

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>
@if(Id!= null)
{
    <h2>Edit Model</h2>
} else
{
    <h2>Add Model</h2>
}
@if (loading)
{
    @*<p>Loading...</p>*@
    <div class="spinner"></div>
}
else
{
    <RadzenTemplateForm Data="@model" TItem="ModelDto" Submit="@Submit" InvalidSubmit="@OnInvalidSubmit">
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Name" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox Name="Name" @bind-Value="@model.Name"></RadzenTextBox>
                <RadzenRequiredValidator Component="Name" Text="Name is required Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Manufacturer" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox Name="Manufacturer" @bind-Value="@model.Manufacturer"></RadzenTextBox>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Status" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown Name="ModelStatus" @bind-Value="@model.Status.Id" AllowClear="false" Data="@modelStatuses" TextProperty="Name" ValueProperty="Id"></RadzenDropDown>
                <RadzenRequiredValidator Component="ModelStatus" Text="Status is required" DefaultValue="0" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Total Flights" />
            </div>
            <div class="col-md-8">
                <RadzenNumeric Name="TotalFlights" TValue="int" @bind-Value="@model.TotalFlights" Disabled="true"></RadzenNumeric>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Purchase Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="PurchaseDate" @bind-Value="@model.PurchasedOn" DateFormat="d"></RadzenDatePicker>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Maiden Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="MaidenDate" @bind-Value="@model.MaidenedOn" DateFormat="d"></RadzenDatePicker>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Sold or Disposed Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="DisposalDate" @bind-Value="@model.DisposedOn" DateFormat="d"></RadzenDatePicker>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Powered By" />
            </div>
            <div class="col-md-8">
                <RadzenTextBox Name="PowerPlant" @bind-Value="@model.PowerPlant"></RadzenTextBox>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Sort Order" />
            </div>
            <div class="col-md-8">
                <RadzenNumeric Name="SortOrder" TValue="int" @bind-Value="@model.SortOrder"></RadzenNumeric>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-top d-flex">
                <RadzenLabel Text="Notes" />
            </div>
            <div class="col-md-8">
                <RadzenTextArea @bind-Value="@model.Notes" Rows=5 style="width: 100%"></RadzenTextArea>
            </div>
        </div>
        <div class="row justify-content-start">
            <div class="col-md-2 align-items-top d-flex" />
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}


@code {

    private String accountId = "0";
    private ModelDto model = new ModelDto();
    private List<ModelStatusDto> modelStatuses = new List<ModelStatusDto>();

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    public bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;

            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;

            model.AccountId = Int32.Parse(accountId);

            var client = ClientFactory.CreateClient("FlightLogAPI");

            modelStatuses = await client.GetFromJsonAsync<List<ModelStatusDto>>($"/api/modelstatuses");


            if (Id.HasValue)
            {
                model = await client.GetFromJsonAsync<ModelDto>($"/api/{accountId}/models/{Id.Value}");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task Submit()
    {
        HttpResponseMessage response;

        // todo Wrap in a try/catch
        var client = ClientFactory.CreateClient("FlightLogAPI");
        if (Id.HasValue)
        {
            response = await client.PutAsJsonAsync($"/api/{accountId}/models", model);
        }
        else
        {
            response = await client.PostAsJsonAsync($"/api/{accountId}/models", model);
        }

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var savedModel = await response.Content.ReadFromJsonAsync<ModelDto>();
            clearFormData();    
        } else
        {
           // TODO Put a notification up
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
       
        
    }

    void Cancel()
    {
        //clearFormData();
       // JSRuntime.InvokeAsync. window.back();
        JsRuntime.InvokeVoidAsync("history.go", -1);
    }

    void clearFormData()
    {
        model = new ModelDto();
        model.AccountId = Int32.Parse(accountId);
   
        
    }
}
