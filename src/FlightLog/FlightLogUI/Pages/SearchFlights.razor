@page "/search-flights"
@attribute [Authorize]

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<h2>Search Flights</h2>

@if (loading)
{
    @*<p>Loading...</p>*@
    <div class="spinner"></div>
}
else
{
    <form>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Start Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="StartDate" @bind-Value="@StartDate" DateFormat="d-MMM-yyyy" Kind="@DateTimeKind.Local"></RadzenDatePicker><br />
                <RadzenRequiredValidator Component="StartDate" Text="Start Date is required" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="End Date" />
            </div>
            <div class="col-md-8">
                <RadzenDatePicker Name="EndDate" @bind-Value="@EndDate" DateFormat="d-MMM-yyyy" Kind="@DateTimeKind.Local"></RadzenDatePicker>
                <RadzenRequiredValidator Component="EndDate" Text="End Date is required" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Model" />
            </div>
            <div class="col-md-8">
                <RadzenDropDown Name="Model" @bind-Value="@ModelId" AllowClear="true" Data="@models" TextProperty="Name" ValueProperty="Id"></RadzenDropDown>
                <RadzenRequiredValidator Component="Model" Text="Model is required" DefaultValue="0" Popup="false" Style="display: block"></RadzenRequiredValidator>
            </div>
        </div>

        <div class="row justify-content-start">
            <div class="col-md-2 align-items-top d-flex" />
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton Icon="search" Text="Search" Click=@Search />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Clear" Click=@Clear />
            </div>
        </div>
    </form>
    <RadzenDataGrid Data="@flights" TItem="FlightDto" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="FlightDto" Property="Date" Filterable="false" Title="Date">
                <Template Context="flight">
                    <div>@flight.Date.ToString("d-MMM-yyyy")</div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="FlightDto" Property="Model.Name" Filterable="false" Title="Model" />
            <RadzenDataGridColumn TItem="FlightDto" Property="Field.Name" Filterable="false" Title="Field" />
            <RadzenDataGridColumn TItem="FlightDto" Property="Pilot.Name" Filterable="false" Title="Pilot" />
            <RadzenDataGridColumn TItem="FlightDto" Property="FlightMinutes" Filterable="false" Title="Minutes" />
            <RadzenDataGridColumn TItem="FlightDto" Property="Id" Filterable="false" Sortable="false" Title="">
                <Template Context="flight">
                    <a href="@($"/edit-flight/{flight.Id}")">Edit</a>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
}

@code {
    private List<FlightDto> flights = new List<FlightDto>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool loading = false;
    private List<ModelDto> models = new List<ModelDto>();

    private String accountId = "0";
    [Parameter]
    [SupplyParameterFromQuery(Name = "from")]
    public DateTime? StartDate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "to")]
    public DateTime? EndDate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "model")]
    public int? ModelId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");
            models = await client.GetFromJsonAsync<List<ModelDto>>($"/api/{accountId}/models");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task Search()
    {
        // todo Wrap in a try/catch
        flights = null;
        var client = ClientFactory.CreateClient("FlightLogAPI");

        if (ModelId.HasValue)
        {
            if (!StartDate.HasValue && !EndDate.HasValue)
            {
                flights = await GetFlightsByModel(ModelId.Value);
                return;
            }

            if (StartDate.HasValue && EndDate.HasValue)
            {
                flights = await GetFlightsByModelAndDate(ModelId.Value, StartDate.Value, EndDate.Value);
                return;
            }
            var startDate = StartDate.HasValue ? StartDate.Value : DateTime.Now.Date.AddYears(-1);
            var endDate = EndDate.HasValue ? StartDate.Value : DateTime.Now.Date.AddDays(1).AddSeconds(-1);

            flights = await GetFlightsByModelAndDate(ModelId.Value, startDate, endDate);
            return;

        }
        else
        {
            var startDate = StartDate.HasValue ? StartDate.Value : DateTime.Now.Date.AddYears(-1);
            var endDate = EndDate.HasValue ? StartDate.Value : DateTime.Now.Date.AddDays(1).AddSeconds(-1);

            flights = await GetFlightsByDate(startDate, endDate);
            return;
        }

    }

    private async Task<List<FlightDto>> GetFlightsByDate(DateTime startDate, DateTime endDate)
    {
        var client = ClientFactory.CreateClient("FlightLogAPI");
        return await client.GetFromJsonAsync<List<FlightDto>>($"/api/{accountId}/flights/from/{startDate.ToString("yyyy-MM-dd")}/to/{endDate.ToString("yyyy-MM-dd")}");
    }

    private async Task<List<FlightDto>> GetFlightsByModelAndDate(int modelId, DateTime startDate, DateTime endDate)
    {
        var client = ClientFactory.CreateClient("FlightLogAPI");
        return await client.GetFromJsonAsync<List<FlightDto>>($"/api/{accountId}/flights/model/{modelId}/from/{startDate.ToString("yyyy-MM-dd")}/to/{endDate.ToString("yyyy-MM-dd")}");
    }

    private async Task<List<FlightDto>> GetFlightsByModel(int modelId)
    {
        var client = ClientFactory.CreateClient("FlightLogAPI");
        return await client.GetFromJsonAsync<List<FlightDto>>($"/api/{accountId}/flights/model/{modelId}");
    }
    protected void Clear()
    {
        // todo Wrap in a try/catch
        flights = new List<FlightDto>();
    }
}