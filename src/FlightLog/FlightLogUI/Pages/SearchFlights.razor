@page "/search-flights"

@attribute [Authorize]

@inject IHttpClientFactory ClientFactory

<style>
    .row {
        margin-bottom: 16px;
    }
</style>

<h2>Search Flights</h2>
    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="Start Date" />
        </div>
        <div class="col-md-8">
            <RadzenDatePicker Name="StartDate" @bind-Value="@startDate" DateFormat="d"></RadzenDatePicker><br/>
            <RadzenRequiredValidator Component="StartDate" Text="Start Date is required" Popup="false" Style="display: block"></RadzenRequiredValidator>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="End Date" />
        </div>
        <div class="col-md-8">
            <RadzenDatePicker Name="EndDate" @bind-Value="@endDate" DateFormat="d"></RadzenDatePicker>
            <RadzenRequiredValidator Component="EndDate" Text="End Date is required" Popup="false" Style="display: block"></RadzenRequiredValidator>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-2 align-items-top d-flex"/>
            <div class="col-md-8 d-flex align-items-end justify-content-start">
                <RadzenButton Icon="search" Text="Search" Click=@Search />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Clear" Click=@Clear />
            </div>
        </div>

        <RadzenDataGrid Data="@flights" TItem="FlightDto" AllowSorting="true">
            <Columns>
<RadzenDataGridColumn TItem="FlightDto" Property="Date" Filterable="false" Title="Date">
                    <Template Context="flight">
                        <div>@flight.Date.ToString("d-MMM-yyyy")</div>
                    </Template> 
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FlightDto" Property="Model.Name" Filterable="false" Title="Model"/>
                <RadzenDataGridColumn TItem="FlightDto" Property="Field.Name" Filterable="false" Title="Field"/>
                <RadzenDataGridColumn TItem="FlightDto" Property="Pilot.Name" Filterable="false" Title="Pilot"/>
                <RadzenDataGridColumn TItem="FlightDto" Property="FlightMinutes" Filterable="false" Title="Minutes"/>
                <RadzenDataGridColumn TItem="FlightDto" Property="Id" Filterable="false" Sortable="false" Title="">
                    <Template Context="flight">
                        <a href="@($"/edit-flight/{flight.Id}")">Edit</a>
                    </Template> 
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>



@code {
    private FlightDto[] flights = new FlightDto[] { };
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool loading = false;
    private String accountId = "0";
    private DateTime startDate;
    private DateTime endDate;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var user = (await authenticationState).User;
            accountId = user.FindFirst("https://flightlog.co.nz/claims/account_id").Value;
            var client = ClientFactory.CreateClient("FlightLogAPI");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task Search()
    {
        // todo Wrap in a try/catch
        flights = null;
        var client = ClientFactory.CreateClient("FlightLogAPI");
        flights = await client.GetFromJsonAsync<FlightDto[]>($"/api/{accountId}/flights/from/{startDate.ToString("yyyy-MM-dd")}/to/{endDate.ToString("yyyy-MM-dd")}");

    }

    protected void Clear()
    {
        // todo Wrap in a try/catch
        flights = new FlightDto[] { };
    }
}